<?php
/**
 * SiteRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright (c) 2020-2024 Adserver.Online
 * @link: https://adserver.online
 * Contact: support@adsrv.org
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adserver\Model;

use \ArrayAccess;
use \Adserver\ObjectSerializer;

/**
 * SiteRequest Class Doc Comment
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SiteRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SiteRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'url' => 'string',
        'idcategory' => 'int',
        'idpublisher' => 'int',
        'is_active' => 'bool',
        'idstatus' => 'int',
        'idblockreason' => 'string',
        'block_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'url' => null,
        'idcategory' => null,
        'idpublisher' => null,
        'is_active' => null,
        'idstatus' => null,
        'idblockreason' => null,
        'block_reason' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'url' => false,
        'idcategory' => false,
        'idpublisher' => false,
        'is_active' => false,
        'idstatus' => false,
        'idblockreason' => false,
        'block_reason' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'url' => 'url',
        'idcategory' => 'idcategory',
        'idpublisher' => 'idpublisher',
        'is_active' => 'is_active',
        'idstatus' => 'idstatus',
        'idblockreason' => 'idblockreason',
        'block_reason' => 'block_reason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'url' => 'setUrl',
        'idcategory' => 'setIdcategory',
        'idpublisher' => 'setIdpublisher',
        'is_active' => 'setIsActive',
        'idstatus' => 'setIdstatus',
        'idblockreason' => 'setIdblockreason',
        'block_reason' => 'setBlockReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'url' => 'getUrl',
        'idcategory' => 'getIdcategory',
        'idpublisher' => 'getIdpublisher',
        'is_active' => 'getIsActive',
        'idstatus' => 'getIdstatus',
        'idblockreason' => 'getIdblockreason',
        'block_reason' => 'getBlockReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IDSTATUS_3500 = 3500;
    public const IDSTATUS_3510 = 3510;
    public const IDSTATUS_3520 = 3520;
    public const IDBLOCKREASON__1 = '1';
    public const IDBLOCKREASON__2 = '2';
    public const IDBLOCKREASON__100 = '100';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdstatusAllowableValues()
    {
        return [
            self::IDSTATUS_3500,
            self::IDSTATUS_3510,
            self::IDSTATUS_3520,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdblockreasonAllowableValues()
    {
        return [
            self::IDBLOCKREASON__1,
            self::IDBLOCKREASON__2,
            self::IDBLOCKREASON__100,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('idcategory', $data ?? [], null);
        $this->setIfExists('idpublisher', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('idstatus', $data ?? [], null);
        $this->setIfExists('idblockreason', $data ?? [], null);
        $this->setIfExists('block_reason', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['idcategory'] === null) {
            $invalidProperties[] = "'idcategory' can't be null";
        }
        if ($this->container['idstatus'] === null) {
            $invalidProperties[] = "'idstatus' can't be null";
        }
        $allowedValues = $this->getIdstatusAllowableValues();
        if (!is_null($this->container['idstatus']) && !in_array($this->container['idstatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'idstatus', must be one of '%s'",
                $this->container['idstatus'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIdblockreasonAllowableValues();
        if (!is_null($this->container['idblockreason']) && !in_array($this->container['idblockreason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'idblockreason', must be one of '%s'",
                $this->container['idblockreason'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets idcategory
     *
     * @return int
     */
    public function getIdcategory()
    {
        return $this->container['idcategory'];
    }

    /**
     * Sets idcategory
     *
     * @param int $idcategory idcategory
     *
     * @return self
     */
    public function setIdcategory($idcategory)
    {
        if (is_null($idcategory)) {
            throw new \InvalidArgumentException('non-nullable idcategory cannot be null');
        }
        $this->container['idcategory'] = $idcategory;

        return $this;
    }

    /**
     * Gets idpublisher
     *
     * @return int|null
     */
    public function getIdpublisher()
    {
        return $this->container['idpublisher'];
    }

    /**
     * Sets idpublisher
     *
     * @param int|null $idpublisher idpublisher
     *
     * @return self
     */
    public function setIdpublisher($idpublisher)
    {
        if (is_null($idpublisher)) {
            throw new \InvalidArgumentException('non-nullable idpublisher cannot be null');
        }
        $this->container['idpublisher'] = $idpublisher;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets idstatus
     *
     * @return int
     */
    public function getIdstatus()
    {
        return $this->container['idstatus'];
    }

    /**
     * Sets idstatus
     *
     * @param int $idstatus Moderation statuses:  * 3520 - Pending  * 3500 - Approved  * 3510 - Rejected
     *
     * @return self
     */
    public function setIdstatus($idstatus)
    {
        if (is_null($idstatus)) {
            throw new \InvalidArgumentException('non-nullable idstatus cannot be null');
        }
        $allowedValues = $this->getIdstatusAllowableValues();
        if (!in_array($idstatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'idstatus', must be one of '%s'",
                    $idstatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['idstatus'] = $idstatus;

        return $this;
    }

    /**
     * Gets idblockreason
     *
     * @return string|null
     */
    public function getIdblockreason()
    {
        return $this->container['idblockreason'];
    }

    /**
     * Sets idblockreason
     *
     * @param string|null $idblockreason Block reason:  * 1 - Low traffic quality  * 2 - Illegal content  * 100 - Custom
     *
     * @return self
     */
    public function setIdblockreason($idblockreason)
    {
        if (is_null($idblockreason)) {
            throw new \InvalidArgumentException('non-nullable idblockreason cannot be null');
        }
        $allowedValues = $this->getIdblockreasonAllowableValues();
        if (!in_array($idblockreason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'idblockreason', must be one of '%s'",
                    $idblockreason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['idblockreason'] = $idblockreason;

        return $this;
    }

    /**
     * Gets block_reason
     *
     * @return string|null
     */
    public function getBlockReason()
    {
        return $this->container['block_reason'];
    }

    /**
     * Sets block_reason
     *
     * @param string|null $block_reason block_reason
     *
     * @return self
     */
    public function setBlockReason($block_reason)
    {
        if (is_null($block_reason)) {
            throw new \InvalidArgumentException('non-nullable block_reason cannot be null');
        }
        $this->container['block_reason'] = $block_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


