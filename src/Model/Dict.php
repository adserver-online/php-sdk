<?php
/**
 * Dict
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright (c) 2020-2024 Adserver.Online
 * @link: https://adserver.online
 * Contact: support@adsrv.org
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adserver\Model;

use \ArrayAccess;
use \Adserver\ObjectSerializer;

/**
 * Dict Class Doc Comment
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Dict implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Dict';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ad_formats' => 'array<string,string>',
        'zone_formats' => 'array<string,string>',
        'price_models' => 'array<string,string>',
        'revenue_models' => 'array<string,string>',
        'transaction_types' => 'array<string,string>',
        'dimensions' => 'array<string,string>',
        'categories' => 'array<string,string>',
        'countries' => 'array<string,string>',
        'payout_methods' => 'array<string,string>',
        'targeting_modes' => 'array<string,string>',
        'devices' => 'array<string,string>',
        'os' => 'array<string,string>',
        'browsers' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ad_formats' => null,
        'zone_formats' => null,
        'price_models' => null,
        'revenue_models' => null,
        'transaction_types' => null,
        'dimensions' => null,
        'categories' => null,
        'countries' => null,
        'payout_methods' => null,
        'targeting_modes' => null,
        'devices' => null,
        'os' => null,
        'browsers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ad_formats' => false,
        'zone_formats' => false,
        'price_models' => false,
        'revenue_models' => false,
        'transaction_types' => false,
        'dimensions' => false,
        'categories' => false,
        'countries' => false,
        'payout_methods' => false,
        'targeting_modes' => false,
        'devices' => false,
        'os' => false,
        'browsers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ad_formats' => 'ad_formats',
        'zone_formats' => 'zone_formats',
        'price_models' => 'price_models',
        'revenue_models' => 'revenue_models',
        'transaction_types' => 'transaction_types',
        'dimensions' => 'dimensions',
        'categories' => 'categories',
        'countries' => 'countries',
        'payout_methods' => 'payout_methods',
        'targeting_modes' => 'targeting_modes',
        'devices' => 'devices',
        'os' => 'os',
        'browsers' => 'browsers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ad_formats' => 'setAdFormats',
        'zone_formats' => 'setZoneFormats',
        'price_models' => 'setPriceModels',
        'revenue_models' => 'setRevenueModels',
        'transaction_types' => 'setTransactionTypes',
        'dimensions' => 'setDimensions',
        'categories' => 'setCategories',
        'countries' => 'setCountries',
        'payout_methods' => 'setPayoutMethods',
        'targeting_modes' => 'setTargetingModes',
        'devices' => 'setDevices',
        'os' => 'setOs',
        'browsers' => 'setBrowsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ad_formats' => 'getAdFormats',
        'zone_formats' => 'getZoneFormats',
        'price_models' => 'getPriceModels',
        'revenue_models' => 'getRevenueModels',
        'transaction_types' => 'getTransactionTypes',
        'dimensions' => 'getDimensions',
        'categories' => 'getCategories',
        'countries' => 'getCountries',
        'payout_methods' => 'getPayoutMethods',
        'targeting_modes' => 'getTargetingModes',
        'devices' => 'getDevices',
        'os' => 'getOs',
        'browsers' => 'getBrowsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ad_formats', $data ?? [], null);
        $this->setIfExists('zone_formats', $data ?? [], null);
        $this->setIfExists('price_models', $data ?? [], null);
        $this->setIfExists('revenue_models', $data ?? [], null);
        $this->setIfExists('transaction_types', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('countries', $data ?? [], null);
        $this->setIfExists('payout_methods', $data ?? [], null);
        $this->setIfExists('targeting_modes', $data ?? [], null);
        $this->setIfExists('devices', $data ?? [], null);
        $this->setIfExists('os', $data ?? [], null);
        $this->setIfExists('browsers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ad_formats
     *
     * @return array<string,string>|null
     */
    public function getAdFormats()
    {
        return $this->container['ad_formats'];
    }

    /**
     * Sets ad_formats
     *
     * @param array<string,string>|null $ad_formats ad_formats
     *
     * @return self
     */
    public function setAdFormats($ad_formats)
    {
        if (is_null($ad_formats)) {
            throw new \InvalidArgumentException('non-nullable ad_formats cannot be null');
        }
        $this->container['ad_formats'] = $ad_formats;

        return $this;
    }

    /**
     * Gets zone_formats
     *
     * @return array<string,string>|null
     */
    public function getZoneFormats()
    {
        return $this->container['zone_formats'];
    }

    /**
     * Sets zone_formats
     *
     * @param array<string,string>|null $zone_formats zone_formats
     *
     * @return self
     */
    public function setZoneFormats($zone_formats)
    {
        if (is_null($zone_formats)) {
            throw new \InvalidArgumentException('non-nullable zone_formats cannot be null');
        }
        $this->container['zone_formats'] = $zone_formats;

        return $this;
    }

    /**
     * Gets price_models
     *
     * @return array<string,string>|null
     */
    public function getPriceModels()
    {
        return $this->container['price_models'];
    }

    /**
     * Sets price_models
     *
     * @param array<string,string>|null $price_models price_models
     *
     * @return self
     */
    public function setPriceModels($price_models)
    {
        if (is_null($price_models)) {
            throw new \InvalidArgumentException('non-nullable price_models cannot be null');
        }
        $this->container['price_models'] = $price_models;

        return $this;
    }

    /**
     * Gets revenue_models
     *
     * @return array<string,string>|null
     */
    public function getRevenueModels()
    {
        return $this->container['revenue_models'];
    }

    /**
     * Sets revenue_models
     *
     * @param array<string,string>|null $revenue_models revenue_models
     *
     * @return self
     */
    public function setRevenueModels($revenue_models)
    {
        if (is_null($revenue_models)) {
            throw new \InvalidArgumentException('non-nullable revenue_models cannot be null');
        }
        $this->container['revenue_models'] = $revenue_models;

        return $this;
    }

    /**
     * Gets transaction_types
     *
     * @return array<string,string>|null
     */
    public function getTransactionTypes()
    {
        return $this->container['transaction_types'];
    }

    /**
     * Sets transaction_types
     *
     * @param array<string,string>|null $transaction_types transaction_types
     *
     * @return self
     */
    public function setTransactionTypes($transaction_types)
    {
        if (is_null($transaction_types)) {
            throw new \InvalidArgumentException('non-nullable transaction_types cannot be null');
        }
        $this->container['transaction_types'] = $transaction_types;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return array<string,string>|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param array<string,string>|null $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return array<string,string>|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param array<string,string>|null $categories categories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return array<string,string>|null
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param array<string,string>|null $countries countries
     *
     * @return self
     */
    public function setCountries($countries)
    {
        if (is_null($countries)) {
            throw new \InvalidArgumentException('non-nullable countries cannot be null');
        }
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets payout_methods
     *
     * @return array<string,string>|null
     */
    public function getPayoutMethods()
    {
        return $this->container['payout_methods'];
    }

    /**
     * Sets payout_methods
     *
     * @param array<string,string>|null $payout_methods payout_methods
     *
     * @return self
     */
    public function setPayoutMethods($payout_methods)
    {
        if (is_null($payout_methods)) {
            throw new \InvalidArgumentException('non-nullable payout_methods cannot be null');
        }
        $this->container['payout_methods'] = $payout_methods;

        return $this;
    }

    /**
     * Gets targeting_modes
     *
     * @return array<string,string>|null
     */
    public function getTargetingModes()
    {
        return $this->container['targeting_modes'];
    }

    /**
     * Sets targeting_modes
     *
     * @param array<string,string>|null $targeting_modes targeting_modes
     *
     * @return self
     */
    public function setTargetingModes($targeting_modes)
    {
        if (is_null($targeting_modes)) {
            throw new \InvalidArgumentException('non-nullable targeting_modes cannot be null');
        }
        $this->container['targeting_modes'] = $targeting_modes;

        return $this;
    }

    /**
     * Gets devices
     *
     * @return array<string,string>|null
     */
    public function getDevices()
    {
        return $this->container['devices'];
    }

    /**
     * Sets devices
     *
     * @param array<string,string>|null $devices devices
     *
     * @return self
     */
    public function setDevices($devices)
    {
        if (is_null($devices)) {
            throw new \InvalidArgumentException('non-nullable devices cannot be null');
        }
        $this->container['devices'] = $devices;

        return $this;
    }

    /**
     * Gets os
     *
     * @return array<string,string>|null
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param array<string,string>|null $os os
     *
     * @return self
     */
    public function setOs($os)
    {
        if (is_null($os)) {
            throw new \InvalidArgumentException('non-nullable os cannot be null');
        }
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets browsers
     *
     * @return array<string,string>|null
     */
    public function getBrowsers()
    {
        return $this->container['browsers'];
    }

    /**
     * Sets browsers
     *
     * @param array<string,string>|null $browsers browsers
     *
     * @return self
     */
    public function setBrowsers($browsers)
    {
        if (is_null($browsers)) {
            throw new \InvalidArgumentException('non-nullable browsers cannot be null');
        }
        $this->container['browsers'] = $browsers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


