<?php
/**
 * AdVastLinear
 *
 * PHP version 5
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright (c) 2020 Adserver.Online
 * Contact: support@adsrv.org
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adserver\Model;

use \Adserver\ObjectSerializer;
use \ArrayAccess;

/**
 * AdVastLinear Class Doc Comment
 *
 * @category Class
 * @description Format-specific properties
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdVastLinear implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdVastLinear';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'file' => 'string',
        'skipoffset' => 'int',
        'skipoffsetType' => 'string',
        'allowSkip' => 'int',
        'maintainAspectRatio' => 'int',
        'videoScalable' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'file' => null,
        'skipoffset' => null,
        'skipoffsetType' => null,
        'allowSkip' => null,
        'maintainAspectRatio' => null,
        'videoScalable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file' => 'file',
        'skipoffset' => 'skipoffset',
        'skipoffsetType' => 'skipoffset_type',
        'allowSkip' => 'allow_skip',
        'maintainAspectRatio' => 'maintain_aspect_ratio',
        'videoScalable' => 'video_scalable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file' => 'setFile',
        'skipoffset' => 'setSkipoffset',
        'skipoffsetType' => 'setSkipoffsetType',
        'allowSkip' => 'setAllowSkip',
        'maintainAspectRatio' => 'setMaintainAspectRatio',
        'videoScalable' => 'setVideoScalable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file' => 'getFile',
        'skipoffset' => 'getSkipoffset',
        'skipoffsetType' => 'getSkipoffsetType',
        'allowSkip' => 'getAllowSkip',
        'maintainAspectRatio' => 'getMaintainAspectRatio',
        'videoScalable' => 'getVideoScalable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SKIPOFFSET_TYPE_TIME = 'Time';
    const SKIPOFFSET_TYPE_PERCENT = 'Percent';
    const ALLOW_SKIP_0 = 0;
    const ALLOW_SKIP_1 = 1;
    const MAINTAIN_ASPECT_RATIO_0 = 0;
    const MAINTAIN_ASPECT_RATIO_1 = 1;
    const VIDEO_SCALABLE_0 = 0;
    const VIDEO_SCALABLE_1 = 1;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSkipoffsetTypeAllowableValues()
    {
        return [
            self::SKIPOFFSET_TYPE_TIME,
            self::SKIPOFFSET_TYPE_PERCENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowSkipAllowableValues()
    {
        return [
            self::ALLOW_SKIP_0,
            self::ALLOW_SKIP_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaintainAspectRatioAllowableValues()
    {
        return [
            self::MAINTAIN_ASPECT_RATIO_0,
            self::MAINTAIN_ASPECT_RATIO_1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVideoScalableAllowableValues()
    {
        return [
            self::VIDEO_SCALABLE_0,
            self::VIDEO_SCALABLE_1,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
        $this->container['skipoffset'] = isset($data['skipoffset']) ? $data['skipoffset'] : null;
        $this->container['skipoffsetType'] = isset($data['skipoffsetType']) ? $data['skipoffsetType'] : null;
        $this->container['allowSkip'] = isset($data['allowSkip']) ? $data['allowSkip'] : null;
        $this->container['maintainAspectRatio'] = isset($data['maintainAspectRatio']) ? $data['maintainAspectRatio'] : null;
        $this->container['videoScalable'] = isset($data['videoScalable']) ? $data['videoScalable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSkipoffsetTypeAllowableValues();
        if (!is_null($this->container['skipoffsetType']) && !in_array($this->container['skipoffsetType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'skipoffsetType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowSkipAllowableValues();
        if (!is_null($this->container['allowSkip']) && !in_array($this->container['allowSkip'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'allowSkip', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMaintainAspectRatioAllowableValues();
        if (!is_null($this->container['maintainAspectRatio']) && !in_array($this->container['maintainAspectRatio'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'maintainAspectRatio', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVideoScalableAllowableValues();
        if (!is_null($this->container['videoScalable']) && !in_array($this->container['videoScalable'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'videoScalable', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file
     *
     * @return string|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param string|null $file Base64 encoded file
     *
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets skipoffset
     *
     * @return int|null
     */
    public function getSkipoffset()
    {
        return $this->container['skipoffset'];
    }

    /**
     * Sets skipoffset
     *
     * @param int|null $skipoffset skipoffset
     *
     * @return $this
     */
    public function setSkipoffset($skipoffset)
    {
        $this->container['skipoffset'] = $skipoffset;

        return $this;
    }

    /**
     * Gets skipoffsetType
     *
     * @return string|null
     */
    public function getSkipoffsetType()
    {
        return $this->container['skipoffsetType'];
    }

    /**
     * Sets skipoffsetType
     *
     * @param string|null $skipoffsetType skipoffsetType
     *
     * @return $this
     */
    public function setSkipoffsetType($skipoffsetType)
    {
        $allowedValues = $this->getSkipoffsetTypeAllowableValues();
        if (!is_null($skipoffsetType) && !in_array($skipoffsetType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'skipoffsetType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['skipoffsetType'] = $skipoffsetType;

        return $this;
    }

    /**
     * Gets allowSkip
     *
     * @return int|null
     */
    public function getAllowSkip()
    {
        return $this->container['allowSkip'];
    }

    /**
     * Sets allowSkip
     *
     * @param int|null $allowSkip allowSkip
     *
     * @return $this
     */
    public function setAllowSkip($allowSkip)
    {
        $allowedValues = $this->getAllowSkipAllowableValues();
        if (!is_null($allowSkip) && !in_array($allowSkip, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'allowSkip', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allowSkip'] = $allowSkip;

        return $this;
    }

    /**
     * Gets maintainAspectRatio
     *
     * @return int|null
     */
    public function getMaintainAspectRatio()
    {
        return $this->container['maintainAspectRatio'];
    }

    /**
     * Sets maintainAspectRatio
     *
     * @param int|null $maintainAspectRatio maintainAspectRatio
     *
     * @return $this
     */
    public function setMaintainAspectRatio($maintainAspectRatio)
    {
        $allowedValues = $this->getMaintainAspectRatioAllowableValues();
        if (!is_null($maintainAspectRatio) && !in_array($maintainAspectRatio, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'maintainAspectRatio', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['maintainAspectRatio'] = $maintainAspectRatio;

        return $this;
    }

    /**
     * Gets videoScalable
     *
     * @return int|null
     */
    public function getVideoScalable()
    {
        return $this->container['videoScalable'];
    }

    /**
     * Sets videoScalable
     *
     * @param int|null $videoScalable videoScalable
     *
     * @return $this
     */
    public function setVideoScalable($videoScalable)
    {
        $allowedValues = $this->getVideoScalableAllowableValues();
        if (!is_null($videoScalable) && !in_array($videoScalable, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'videoScalable', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['videoScalable'] = $videoScalable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


