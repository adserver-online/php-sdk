<?php
/**
 * StatsItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright (c) 2020-2022 Adserver.Online
 * @link: https://adserver.online
 * Contact: support@adsrv.org
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adserver\Model;

use \ArrayAccess;
use \Adserver\ObjectSerializer;

/**
 * StatsItem Class Doc Comment
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StatsItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StatsItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dimension' => 'string',
        'iddimension' => 'int',
        'impressions' => 'int',
        'impressions_unique' => 'int',
        'clicks' => 'int',
        'clicks_unique' => 'int',
        'conversions' => 'int',
        'cpm' => 'float',
        'cpc' => 'float',
        'cpa' => 'float',
        'amount' => 'float',
        'amount_pub' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dimension' => null,
        'iddimension' => null,
        'impressions' => null,
        'impressions_unique' => null,
        'clicks' => null,
        'clicks_unique' => null,
        'conversions' => null,
        'cpm' => null,
        'cpc' => null,
        'cpa' => null,
        'amount' => null,
        'amount_pub' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dimension' => 'dimension',
        'iddimension' => 'iddimension',
        'impressions' => 'impressions',
        'impressions_unique' => 'impressions_unique',
        'clicks' => 'clicks',
        'clicks_unique' => 'clicks_unique',
        'conversions' => 'conversions',
        'cpm' => 'cpm',
        'cpc' => 'cpc',
        'cpa' => 'cpa',
        'amount' => 'amount',
        'amount_pub' => 'amount_pub'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dimension' => 'setDimension',
        'iddimension' => 'setIddimension',
        'impressions' => 'setImpressions',
        'impressions_unique' => 'setImpressionsUnique',
        'clicks' => 'setClicks',
        'clicks_unique' => 'setClicksUnique',
        'conversions' => 'setConversions',
        'cpm' => 'setCpm',
        'cpc' => 'setCpc',
        'cpa' => 'setCpa',
        'amount' => 'setAmount',
        'amount_pub' => 'setAmountPub'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dimension' => 'getDimension',
        'iddimension' => 'getIddimension',
        'impressions' => 'getImpressions',
        'impressions_unique' => 'getImpressionsUnique',
        'clicks' => 'getClicks',
        'clicks_unique' => 'getClicksUnique',
        'conversions' => 'getConversions',
        'cpm' => 'getCpm',
        'cpc' => 'getCpc',
        'cpa' => 'getCpa',
        'amount' => 'getAmount',
        'amount_pub' => 'getAmountPub'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dimension'] = $data['dimension'] ?? null;
        $this->container['iddimension'] = $data['iddimension'] ?? null;
        $this->container['impressions'] = $data['impressions'] ?? null;
        $this->container['impressions_unique'] = $data['impressions_unique'] ?? null;
        $this->container['clicks'] = $data['clicks'] ?? null;
        $this->container['clicks_unique'] = $data['clicks_unique'] ?? null;
        $this->container['conversions'] = $data['conversions'] ?? null;
        $this->container['cpm'] = $data['cpm'] ?? null;
        $this->container['cpc'] = $data['cpc'] ?? null;
        $this->container['cpa'] = $data['cpa'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['amount_pub'] = $data['amount_pub'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dimension
     *
     * @return string|null
     */
    public function getDimension()
    {
        return $this->container['dimension'];
    }

    /**
     * Sets dimension
     *
     * @param string|null $dimension dimension
     *
     * @return self
     */
    public function setDimension($dimension)
    {
        $this->container['dimension'] = $dimension;

        return $this;
    }

    /**
     * Gets iddimension
     *
     * @return int|null
     */
    public function getIddimension()
    {
        return $this->container['iddimension'];
    }

    /**
     * Sets iddimension
     *
     * @param int|null $iddimension iddimension
     *
     * @return self
     */
    public function setIddimension($iddimension)
    {
        $this->container['iddimension'] = $iddimension;

        return $this;
    }

    /**
     * Gets impressions
     *
     * @return int|null
     */
    public function getImpressions()
    {
        return $this->container['impressions'];
    }

    /**
     * Sets impressions
     *
     * @param int|null $impressions impressions
     *
     * @return self
     */
    public function setImpressions($impressions)
    {
        $this->container['impressions'] = $impressions;

        return $this;
    }

    /**
     * Gets impressions_unique
     *
     * @return int|null
     */
    public function getImpressionsUnique()
    {
        return $this->container['impressions_unique'];
    }

    /**
     * Sets impressions_unique
     *
     * @param int|null $impressions_unique impressions_unique
     *
     * @return self
     */
    public function setImpressionsUnique($impressions_unique)
    {
        $this->container['impressions_unique'] = $impressions_unique;

        return $this;
    }

    /**
     * Gets clicks
     *
     * @return int|null
     */
    public function getClicks()
    {
        return $this->container['clicks'];
    }

    /**
     * Sets clicks
     *
     * @param int|null $clicks clicks
     *
     * @return self
     */
    public function setClicks($clicks)
    {
        $this->container['clicks'] = $clicks;

        return $this;
    }

    /**
     * Gets clicks_unique
     *
     * @return int|null
     */
    public function getClicksUnique()
    {
        return $this->container['clicks_unique'];
    }

    /**
     * Sets clicks_unique
     *
     * @param int|null $clicks_unique clicks_unique
     *
     * @return self
     */
    public function setClicksUnique($clicks_unique)
    {
        $this->container['clicks_unique'] = $clicks_unique;

        return $this;
    }

    /**
     * Gets conversions
     *
     * @return int|null
     */
    public function getConversions()
    {
        return $this->container['conversions'];
    }

    /**
     * Sets conversions
     *
     * @param int|null $conversions conversions
     *
     * @return self
     */
    public function setConversions($conversions)
    {
        $this->container['conversions'] = $conversions;

        return $this;
    }

    /**
     * Gets cpm
     *
     * @return float|null
     */
    public function getCpm()
    {
        return $this->container['cpm'];
    }

    /**
     * Sets cpm
     *
     * @param float|null $cpm cpm
     *
     * @return self
     */
    public function setCpm($cpm)
    {
        $this->container['cpm'] = $cpm;

        return $this;
    }

    /**
     * Gets cpc
     *
     * @return float|null
     */
    public function getCpc()
    {
        return $this->container['cpc'];
    }

    /**
     * Sets cpc
     *
     * @param float|null $cpc cpc
     *
     * @return self
     */
    public function setCpc($cpc)
    {
        $this->container['cpc'] = $cpc;

        return $this;
    }

    /**
     * Gets cpa
     *
     * @return float|null
     */
    public function getCpa()
    {
        return $this->container['cpa'];
    }

    /**
     * Sets cpa
     *
     * @param float|null $cpa cpa
     *
     * @return self
     */
    public function setCpa($cpa)
    {
        $this->container['cpa'] = $cpa;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_pub
     *
     * @return float|null
     */
    public function getAmountPub()
    {
        return $this->container['amount_pub'];
    }

    /**
     * Sets amount_pub
     *
     * @param float|null $amount_pub amount_pub
     *
     * @return self
     */
    public function setAmountPub($amount_pub)
    {
        $this->container['amount_pub'] = $amount_pub;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


