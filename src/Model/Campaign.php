<?php
/**
 * Campaign
 *
 * PHP version 5
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright (c) 2020 Adserver.Online
 * Contact: support@adsrv.org
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adserver\Model;

use \Adserver\ObjectSerializer;
use \ArrayAccess;

/**
 * Campaign Class Doc Comment
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Campaign implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Campaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'advertiser' => 'object',
        'status' => 'object',
        'runstatus' => 'object',
        'pricemodel' => 'object',
        'category' => 'object',
        'rate' => 'float',
        'limits' => 'object',
        'counters' => 'object',
        'frequency_capping' => 'string',
        'tier' => 'string',
        'wight' => 'string',
        'timezone' => 'string',
        'ads' => 'object[]',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'advertiser' => null,
        'status' => null,
        'runstatus' => null,
        'pricemodel' => null,
        'category' => null,
        'rate' => null,
        'limits' => null,
        'counters' => null,
        'frequency_capping' => null,
        'tier' => null,
        'wight' => null,
        'timezone' => null,
        'ads' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'advertiser' => 'advertiser',
        'status' => 'status',
        'runstatus' => 'runstatus',
        'pricemodel' => 'pricemodel',
        'category' => 'category',
        'rate' => 'rate',
        'limits' => 'limits',
        'counters' => 'counters',
        'frequency_capping' => 'frequency_capping',
        'tier' => 'tier',
        'wight' => 'wight',
        'timezone' => 'timezone',
        'ads' => 'ads',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'advertiser' => 'setAdvertiser',
        'status' => 'setStatus',
        'runstatus' => 'setRunstatus',
        'pricemodel' => 'setPricemodel',
        'category' => 'setCategory',
        'rate' => 'setRate',
        'limits' => 'setLimits',
        'counters' => 'setCounters',
        'frequency_capping' => 'setFrequencyCapping',
        'tier' => 'setTier',
        'wight' => 'setWight',
        'timezone' => 'setTimezone',
        'ads' => 'setAds',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'advertiser' => 'getAdvertiser',
        'status' => 'getStatus',
        'runstatus' => 'getRunstatus',
        'pricemodel' => 'getPricemodel',
        'category' => 'getCategory',
        'rate' => 'getRate',
        'limits' => 'getLimits',
        'counters' => 'getCounters',
        'frequency_capping' => 'getFrequencyCapping',
        'tier' => 'getTier',
        'wight' => 'getWight',
        'timezone' => 'getTimezone',
        'ads' => 'getAds',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['advertiser'] = isset($data['advertiser']) ? $data['advertiser'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['runstatus'] = isset($data['runstatus']) ? $data['runstatus'] : null;
        $this->container['pricemodel'] = isset($data['pricemodel']) ? $data['pricemodel'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['limits'] = isset($data['limits']) ? $data['limits'] : null;
        $this->container['counters'] = isset($data['counters']) ? $data['counters'] : null;
        $this->container['frequency_capping'] = isset($data['frequency_capping']) ? $data['frequency_capping'] : null;
        $this->container['tier'] = isset($data['tier']) ? $data['tier'] : null;
        $this->container['wight'] = isset($data['wight']) ? $data['wight'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['ads'] = isset($data['ads']) ? $data['ads'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets advertiser
     *
     * @return object|null
     */
    public function getAdvertiser()
    {
        return $this->container['advertiser'];
    }

    /**
     * Sets advertiser
     *
     * @param object|null $advertiser advertiser
     *
     * @return $this
     */
    public function setAdvertiser($advertiser)
    {
        $this->container['advertiser'] = $advertiser;

        return $this;
    }

    /**
     * Gets status
     *
     * @return object|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param object|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets runstatus
     *
     * @return object|null
     */
    public function getRunstatus()
    {
        return $this->container['runstatus'];
    }

    /**
     * Sets runstatus
     *
     * @param object|null $runstatus runstatus
     *
     * @return $this
     */
    public function setRunstatus($runstatus)
    {
        $this->container['runstatus'] = $runstatus;

        return $this;
    }

    /**
     * Gets pricemodel
     *
     * @return object|null
     */
    public function getPricemodel()
    {
        return $this->container['pricemodel'];
    }

    /**
     * Sets pricemodel
     *
     * @param object|null $pricemodel pricemodel
     *
     * @return $this
     */
    public function setPricemodel($pricemodel)
    {
        $this->container['pricemodel'] = $pricemodel;

        return $this;
    }

    /**
     * Gets category
     *
     * @return object|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param object|null $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate rate
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets limits
     *
     * @return object|null
     */
    public function getLimits()
    {
        return $this->container['limits'];
    }

    /**
     * Sets limits
     *
     * @param object|null $limits limits
     *
     * @return $this
     */
    public function setLimits($limits)
    {
        $this->container['limits'] = $limits;

        return $this;
    }

    /**
     * Gets counters
     *
     * @return object|null
     */
    public function getCounters()
    {
        return $this->container['counters'];
    }

    /**
     * Sets counters
     *
     * @param object|null $counters counters
     *
     * @return $this
     */
    public function setCounters($counters)
    {
        $this->container['counters'] = $counters;

        return $this;
    }

    /**
     * Gets frequency_capping
     *
     * @return string|null
     */
    public function getFrequencyCapping()
    {
        return $this->container['frequency_capping'];
    }

    /**
     * Sets frequency_capping
     *
     * @param string|null $frequency_capping frequency_capping
     *
     * @return $this
     */
    public function setFrequencyCapping($frequency_capping)
    {
        $this->container['frequency_capping'] = $frequency_capping;

        return $this;
    }

    /**
     * Gets tier
     *
     * @return string|null
     */
    public function getTier()
    {
        return $this->container['tier'];
    }

    /**
     * Sets tier
     *
     * @param string|null $tier tier
     *
     * @return $this
     */
    public function setTier($tier)
    {
        $this->container['tier'] = $tier;

        return $this;
    }

    /**
     * Gets wight
     *
     * @return string|null
     */
    public function getWight()
    {
        return $this->container['wight'];
    }

    /**
     * Sets wight
     *
     * @param string|null $wight wight
     *
     * @return $this
     */
    public function setWight($wight)
    {
        $this->container['wight'] = $wight;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets ads
     *
     * @return object[]|null
     */
    public function getAds()
    {
        return $this->container['ads'];
    }

    /**
     * Sets ads
     *
     * @param object[]|null $ads ads
     *
     * @return $this
     */
    public function setAds($ads)
    {
        $this->container['ads'] = $ads;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


