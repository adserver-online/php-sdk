<?php
/**
 * UserRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright (c) 2020-2024 Adserver.Online
 * @link: https://adserver.online
 * Contact: support@adsrv.org
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adserver\Model;

use \ArrayAccess;
use \Adserver\ObjectSerializer;

/**
 * UserRequest Class Doc Comment
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'skype' => 'string',
        'timezone' => 'string',
        'is_active' => 'bool',
        'send_password' => 'bool',
        'allow_login' => 'bool',
        'campaigns_post_moderation' => 'bool',
        'idrole' => 'int',
        'idpayoutmethod' => 'int',
        'payout_account' => 'string',
        'referral_code' => 'string',
        'reg_ip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'email' => null,
        'phone' => null,
        'skype' => null,
        'timezone' => null,
        'is_active' => null,
        'send_password' => null,
        'allow_login' => null,
        'campaigns_post_moderation' => null,
        'idrole' => null,
        'idpayoutmethod' => null,
        'payout_account' => null,
        'referral_code' => null,
        'reg_ip' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'email' => false,
        'phone' => false,
        'skype' => false,
        'timezone' => false,
        'is_active' => false,
        'send_password' => false,
        'allow_login' => false,
        'campaigns_post_moderation' => false,
        'idrole' => false,
        'idpayoutmethod' => false,
        'payout_account' => false,
        'referral_code' => false,
        'reg_ip' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'email' => 'email',
        'phone' => 'phone',
        'skype' => 'skype',
        'timezone' => 'timezone',
        'is_active' => 'is_active',
        'send_password' => 'send_password',
        'allow_login' => 'allow_login',
        'campaigns_post_moderation' => 'campaigns_post_moderation',
        'idrole' => 'idrole',
        'idpayoutmethod' => 'idpayoutmethod',
        'payout_account' => 'payout_account',
        'referral_code' => 'referral_code',
        'reg_ip' => 'reg_ip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'skype' => 'setSkype',
        'timezone' => 'setTimezone',
        'is_active' => 'setIsActive',
        'send_password' => 'setSendPassword',
        'allow_login' => 'setAllowLogin',
        'campaigns_post_moderation' => 'setCampaignsPostModeration',
        'idrole' => 'setIdrole',
        'idpayoutmethod' => 'setIdpayoutmethod',
        'payout_account' => 'setPayoutAccount',
        'referral_code' => 'setReferralCode',
        'reg_ip' => 'setRegIp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'skype' => 'getSkype',
        'timezone' => 'getTimezone',
        'is_active' => 'getIsActive',
        'send_password' => 'getSendPassword',
        'allow_login' => 'getAllowLogin',
        'campaigns_post_moderation' => 'getCampaignsPostModeration',
        'idrole' => 'getIdrole',
        'idpayoutmethod' => 'getIdpayoutmethod',
        'payout_account' => 'getPayoutAccount',
        'referral_code' => 'getReferralCode',
        'reg_ip' => 'getRegIp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IDROLE_2 = 2;
    public const IDROLE_3 = 3;
    public const IDROLE_4 = 4;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdroleAllowableValues()
    {
        return [
            self::IDROLE_2,
            self::IDROLE_3,
            self::IDROLE_4,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('skype', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('send_password', $data ?? [], null);
        $this->setIfExists('allow_login', $data ?? [], null);
        $this->setIfExists('campaigns_post_moderation', $data ?? [], null);
        $this->setIfExists('idrole', $data ?? [], null);
        $this->setIfExists('idpayoutmethod', $data ?? [], null);
        $this->setIfExists('payout_account', $data ?? [], null);
        $this->setIfExists('referral_code', $data ?? [], null);
        $this->setIfExists('reg_ip', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['idrole'] === null) {
            $invalidProperties[] = "'idrole' can't be null";
        }
        $allowedValues = $this->getIdroleAllowableValues();
        if (!is_null($this->container['idrole']) && !in_array($this->container['idrole'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'idrole', must be one of '%s'",
                $this->container['idrole'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets skype
     *
     * @return string|null
     */
    public function getSkype()
    {
        return $this->container['skype'];
    }

    /**
     * Sets skype
     *
     * @param string|null $skype skype
     *
     * @return self
     */
    public function setSkype($skype)
    {
        if (is_null($skype)) {
            throw new \InvalidArgumentException('non-nullable skype cannot be null');
        }
        $this->container['skype'] = $skype;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets send_password
     *
     * @return bool|null
     */
    public function getSendPassword()
    {
        return $this->container['send_password'];
    }

    /**
     * Sets send_password
     *
     * @param bool|null $send_password Generate and send password to user email
     *
     * @return self
     */
    public function setSendPassword($send_password)
    {
        if (is_null($send_password)) {
            throw new \InvalidArgumentException('non-nullable send_password cannot be null');
        }
        $this->container['send_password'] = $send_password;

        return $this;
    }

    /**
     * Gets allow_login
     *
     * @return bool|null
     */
    public function getAllowLogin()
    {
        return $this->container['allow_login'];
    }

    /**
     * Sets allow_login
     *
     * @param bool|null $allow_login allow_login
     *
     * @return self
     */
    public function setAllowLogin($allow_login)
    {
        if (is_null($allow_login)) {
            throw new \InvalidArgumentException('non-nullable allow_login cannot be null');
        }
        $this->container['allow_login'] = $allow_login;

        return $this;
    }

    /**
     * Gets campaigns_post_moderation
     *
     * @return bool|null
     */
    public function getCampaignsPostModeration()
    {
        return $this->container['campaigns_post_moderation'];
    }

    /**
     * Sets campaigns_post_moderation
     *
     * @param bool|null $campaigns_post_moderation campaigns_post_moderation
     *
     * @return self
     */
    public function setCampaignsPostModeration($campaigns_post_moderation)
    {
        if (is_null($campaigns_post_moderation)) {
            throw new \InvalidArgumentException('non-nullable campaigns_post_moderation cannot be null');
        }
        $this->container['campaigns_post_moderation'] = $campaigns_post_moderation;

        return $this;
    }

    /**
     * Gets idrole
     *
     * @return int
     */
    public function getIdrole()
    {
        return $this->container['idrole'];
    }

    /**
     * Sets idrole
     *
     * @param int $idrole Roles:  * 2 - Manager  * 3 - Advertiser  * 4 - Publisher
     *
     * @return self
     */
    public function setIdrole($idrole)
    {
        if (is_null($idrole)) {
            throw new \InvalidArgumentException('non-nullable idrole cannot be null');
        }
        $allowedValues = $this->getIdroleAllowableValues();
        if (!in_array($idrole, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'idrole', must be one of '%s'",
                    $idrole,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['idrole'] = $idrole;

        return $this;
    }

    /**
     * Gets idpayoutmethod
     *
     * @return int|null
     */
    public function getIdpayoutmethod()
    {
        return $this->container['idpayoutmethod'];
    }

    /**
     * Sets idpayoutmethod
     *
     * @param int|null $idpayoutmethod idpayoutmethod
     *
     * @return self
     */
    public function setIdpayoutmethod($idpayoutmethod)
    {
        if (is_null($idpayoutmethod)) {
            throw new \InvalidArgumentException('non-nullable idpayoutmethod cannot be null');
        }
        $this->container['idpayoutmethod'] = $idpayoutmethod;

        return $this;
    }

    /**
     * Gets payout_account
     *
     * @return string|null
     */
    public function getPayoutAccount()
    {
        return $this->container['payout_account'];
    }

    /**
     * Sets payout_account
     *
     * @param string|null $payout_account payout_account
     *
     * @return self
     */
    public function setPayoutAccount($payout_account)
    {
        if (is_null($payout_account)) {
            throw new \InvalidArgumentException('non-nullable payout_account cannot be null');
        }
        $this->container['payout_account'] = $payout_account;

        return $this;
    }

    /**
     * Gets referral_code
     *
     * @return string|null
     */
    public function getReferralCode()
    {
        return $this->container['referral_code'];
    }

    /**
     * Sets referral_code
     *
     * @param string|null $referral_code referral_code
     *
     * @return self
     */
    public function setReferralCode($referral_code)
    {
        if (is_null($referral_code)) {
            throw new \InvalidArgumentException('non-nullable referral_code cannot be null');
        }
        $this->container['referral_code'] = $referral_code;

        return $this;
    }

    /**
     * Gets reg_ip
     *
     * @return string|null
     */
    public function getRegIp()
    {
        return $this->container['reg_ip'];
    }

    /**
     * Sets reg_ip
     *
     * @param string|null $reg_ip IP address that user used for registration
     *
     * @return self
     */
    public function setRegIp($reg_ip)
    {
        if (is_null($reg_ip)) {
            throw new \InvalidArgumentException('non-nullable reg_ip cannot be null');
        }
        $this->container['reg_ip'] = $reg_ip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


