<?php
/**
 * TransactionRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright (c) 2020-2024 Adserver.Online
 * @link: https://adserver.online
 * Contact: support@adsrv.org
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adserver\Model;

use \ArrayAccess;
use \Adserver\ObjectSerializer;

/**
 * TransactionRequest Class Doc Comment
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'iduser' => 'int',
        'idtransactiontype' => 'int',
        'amount' => 'float',
        'descr' => 'string',
        'created_datetime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'iduser' => null,
        'idtransactiontype' => null,
        'amount' => null,
        'descr' => null,
        'created_datetime' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'iduser' => false,
        'idtransactiontype' => false,
        'amount' => false,
        'descr' => false,
        'created_datetime' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'iduser' => 'iduser',
        'idtransactiontype' => 'idtransactiontype',
        'amount' => 'amount',
        'descr' => 'descr',
        'created_datetime' => 'created_datetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'iduser' => 'setIduser',
        'idtransactiontype' => 'setIdtransactiontype',
        'amount' => 'setAmount',
        'descr' => 'setDescr',
        'created_datetime' => 'setCreatedDatetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'iduser' => 'getIduser',
        'idtransactiontype' => 'getIdtransactiontype',
        'amount' => 'getAmount',
        'descr' => 'getDescr',
        'created_datetime' => 'getCreatedDatetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IDTRANSACTIONTYPE_1 = 1;
    public const IDTRANSACTIONTYPE_2 = 2;
    public const IDTRANSACTIONTYPE_3 = 3;
    public const IDTRANSACTIONTYPE_4 = 4;
    public const IDTRANSACTIONTYPE_5 = 5;
    public const IDTRANSACTIONTYPE_6 = 6;
    public const IDTRANSACTIONTYPE_8 = 8;
    public const IDTRANSACTIONTYPE_9 = 9;
    public const IDTRANSACTIONTYPE_10 = 10;
    public const IDTRANSACTIONTYPE_11 = 11;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdtransactiontypeAllowableValues()
    {
        return [
            self::IDTRANSACTIONTYPE_1,
            self::IDTRANSACTIONTYPE_2,
            self::IDTRANSACTIONTYPE_3,
            self::IDTRANSACTIONTYPE_4,
            self::IDTRANSACTIONTYPE_5,
            self::IDTRANSACTIONTYPE_6,
            self::IDTRANSACTIONTYPE_8,
            self::IDTRANSACTIONTYPE_9,
            self::IDTRANSACTIONTYPE_10,
            self::IDTRANSACTIONTYPE_11,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('iduser', $data ?? [], null);
        $this->setIfExists('idtransactiontype', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('descr', $data ?? [], null);
        $this->setIfExists('created_datetime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['iduser'] === null) {
            $invalidProperties[] = "'iduser' can't be null";
        }
        if ($this->container['idtransactiontype'] === null) {
            $invalidProperties[] = "'idtransactiontype' can't be null";
        }
        $allowedValues = $this->getIdtransactiontypeAllowableValues();
        if (!is_null($this->container['idtransactiontype']) && !in_array($this->container['idtransactiontype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'idtransactiontype', must be one of '%s'",
                $this->container['idtransactiontype'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets iduser
     *
     * @return int
     */
    public function getIduser()
    {
        return $this->container['iduser'];
    }

    /**
     * Sets iduser
     *
     * @param int $iduser iduser
     *
     * @return self
     */
    public function setIduser($iduser)
    {
        if (is_null($iduser)) {
            throw new \InvalidArgumentException('non-nullable iduser cannot be null');
        }
        $this->container['iduser'] = $iduser;

        return $this;
    }

    /**
     * Gets idtransactiontype
     *
     * @return int
     */
    public function getIdtransactiontype()
    {
        return $this->container['idtransactiontype'];
    }

    /**
     * Sets idtransactiontype
     *
     * @param int $idtransactiontype Types:   * 1 - Deposit   * 2 - Billing   * 3 - Payout   * 4 - Refund   * 5 - Adv.other IN   * 6 - Adv.other OUT   * 8 - Revenue   * 9 - Pub.reward   * 10 - Pub.other IN   * 11 - Pub.other OUT
     *
     * @return self
     */
    public function setIdtransactiontype($idtransactiontype)
    {
        if (is_null($idtransactiontype)) {
            throw new \InvalidArgumentException('non-nullable idtransactiontype cannot be null');
        }
        $allowedValues = $this->getIdtransactiontypeAllowableValues();
        if (!in_array($idtransactiontype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'idtransactiontype', must be one of '%s'",
                    $idtransactiontype,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['idtransactiontype'] = $idtransactiontype;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets descr
     *
     * @return string|null
     */
    public function getDescr()
    {
        return $this->container['descr'];
    }

    /**
     * Sets descr
     *
     * @param string|null $descr descr
     *
     * @return self
     */
    public function setDescr($descr)
    {
        if (is_null($descr)) {
            throw new \InvalidArgumentException('non-nullable descr cannot be null');
        }
        $this->container['descr'] = $descr;

        return $this;
    }

    /**
     * Gets created_datetime
     *
     * @return string|null
     */
    public function getCreatedDatetime()
    {
        return $this->container['created_datetime'];
    }

    /**
     * Sets created_datetime
     *
     * @param string|null $created_datetime Format: YYYY-MM-DD HH:MM:SS
     *
     * @return self
     */
    public function setCreatedDatetime($created_datetime)
    {
        if (is_null($created_datetime)) {
            throw new \InvalidArgumentException('non-nullable created_datetime cannot be null');
        }
        $this->container['created_datetime'] = $created_datetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


