<?php
/**
 * CampaignRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright (c) 2020-2024 Adserver.Online
 * @link: https://adserver.online
 * Contact: support@adsrv.org
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adserver\Model;

use \ArrayAccess;
use \Adserver\ObjectSerializer;

/**
 * CampaignRequest Class Doc Comment
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CampaignRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CampaignRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'idadvertiser' => 'int',
        'idcategory' => 'int',
        'idstatus' => 'int',
        'idrunstatus' => 'int',
        'idpricemodel' => 'int',
        'rate' => 'float',
        'budget_total' => 'float',
        'budget_daily' => 'float',
        'start_date' => 'string',
        'finish_date' => 'string',
        'os' => 'int[]',
        'browser' => 'int[]',
        'device' => 'int[]',
        'brand' => 'int[]',
        'language' => 'string[]',
        'geo' => 'int[]',
        'geo_bl' => 'int[]',
        'sites_category' => 'int[]',
        'timetargeting' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'idadvertiser' => null,
        'idcategory' => null,
        'idstatus' => null,
        'idrunstatus' => null,
        'idpricemodel' => null,
        'rate' => null,
        'budget_total' => null,
        'budget_daily' => null,
        'start_date' => null,
        'finish_date' => null,
        'os' => null,
        'browser' => null,
        'device' => null,
        'brand' => null,
        'language' => null,
        'geo' => null,
        'geo_bl' => null,
        'sites_category' => null,
        'timetargeting' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'idadvertiser' => false,
        'idcategory' => false,
        'idstatus' => false,
        'idrunstatus' => false,
        'idpricemodel' => false,
        'rate' => false,
        'budget_total' => false,
        'budget_daily' => false,
        'start_date' => false,
        'finish_date' => false,
        'os' => false,
        'browser' => false,
        'device' => false,
        'brand' => false,
        'language' => false,
        'geo' => false,
        'geo_bl' => false,
        'sites_category' => false,
        'timetargeting' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'idadvertiser' => 'idadvertiser',
        'idcategory' => 'idcategory',
        'idstatus' => 'idstatus',
        'idrunstatus' => 'idrunstatus',
        'idpricemodel' => 'idpricemodel',
        'rate' => 'rate',
        'budget_total' => 'budget_total',
        'budget_daily' => 'budget_daily',
        'start_date' => 'start_date',
        'finish_date' => 'finish_date',
        'os' => 'os',
        'browser' => 'browser',
        'device' => 'device',
        'brand' => 'brand',
        'language' => 'language',
        'geo' => 'geo',
        'geo_bl' => 'geo_bl',
        'sites_category' => 'sites_category',
        'timetargeting' => 'timetargeting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'idadvertiser' => 'setIdadvertiser',
        'idcategory' => 'setIdcategory',
        'idstatus' => 'setIdstatus',
        'idrunstatus' => 'setIdrunstatus',
        'idpricemodel' => 'setIdpricemodel',
        'rate' => 'setRate',
        'budget_total' => 'setBudgetTotal',
        'budget_daily' => 'setBudgetDaily',
        'start_date' => 'setStartDate',
        'finish_date' => 'setFinishDate',
        'os' => 'setOs',
        'browser' => 'setBrowser',
        'device' => 'setDevice',
        'brand' => 'setBrand',
        'language' => 'setLanguage',
        'geo' => 'setGeo',
        'geo_bl' => 'setGeoBl',
        'sites_category' => 'setSitesCategory',
        'timetargeting' => 'setTimetargeting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'idadvertiser' => 'getIdadvertiser',
        'idcategory' => 'getIdcategory',
        'idstatus' => 'getIdstatus',
        'idrunstatus' => 'getIdrunstatus',
        'idpricemodel' => 'getIdpricemodel',
        'rate' => 'getRate',
        'budget_total' => 'getBudgetTotal',
        'budget_daily' => 'getBudgetDaily',
        'start_date' => 'getStartDate',
        'finish_date' => 'getFinishDate',
        'os' => 'getOs',
        'browser' => 'getBrowser',
        'device' => 'getDevice',
        'brand' => 'getBrand',
        'language' => 'getLanguage',
        'geo' => 'getGeo',
        'geo_bl' => 'getGeoBl',
        'sites_category' => 'getSitesCategory',
        'timetargeting' => 'getTimetargeting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IDSTATUS_1510 = 1510;
    public const IDSTATUS_1520 = 1520;
    public const IDSTATUS_1530 = 1530;
    public const IDRUNSTATUS_4010 = 4010;
    public const IDRUNSTATUS_4020 = 4020;
    public const IDRUNSTATUS_4030 = 4030;
    public const IDPRICEMODEL_1 = 1;
    public const IDPRICEMODEL_2 = 2;
    public const IDPRICEMODEL_3 = 3;
    public const IDPRICEMODEL_4 = 4;
    public const IDPRICEMODEL_5 = 5;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdstatusAllowableValues()
    {
        return [
            self::IDSTATUS_1510,
            self::IDSTATUS_1520,
            self::IDSTATUS_1530,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdrunstatusAllowableValues()
    {
        return [
            self::IDRUNSTATUS_4010,
            self::IDRUNSTATUS_4020,
            self::IDRUNSTATUS_4030,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdpricemodelAllowableValues()
    {
        return [
            self::IDPRICEMODEL_1,
            self::IDPRICEMODEL_2,
            self::IDPRICEMODEL_3,
            self::IDPRICEMODEL_4,
            self::IDPRICEMODEL_5,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('idadvertiser', $data ?? [], null);
        $this->setIfExists('idcategory', $data ?? [], null);
        $this->setIfExists('idstatus', $data ?? [], null);
        $this->setIfExists('idrunstatus', $data ?? [], null);
        $this->setIfExists('idpricemodel', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('budget_total', $data ?? [], null);
        $this->setIfExists('budget_daily', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('finish_date', $data ?? [], null);
        $this->setIfExists('os', $data ?? [], null);
        $this->setIfExists('browser', $data ?? [], null);
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('geo', $data ?? [], null);
        $this->setIfExists('geo_bl', $data ?? [], null);
        $this->setIfExists('sites_category', $data ?? [], null);
        $this->setIfExists('timetargeting', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['idadvertiser'] === null) {
            $invalidProperties[] = "'idadvertiser' can't be null";
        }
        $allowedValues = $this->getIdstatusAllowableValues();
        if (!is_null($this->container['idstatus']) && !in_array($this->container['idstatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'idstatus', must be one of '%s'",
                $this->container['idstatus'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIdrunstatusAllowableValues();
        if (!is_null($this->container['idrunstatus']) && !in_array($this->container['idrunstatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'idrunstatus', must be one of '%s'",
                $this->container['idrunstatus'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIdpricemodelAllowableValues();
        if (!is_null($this->container['idpricemodel']) && !in_array($this->container['idpricemodel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'idpricemodel', must be one of '%s'",
                $this->container['idpricemodel'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets idadvertiser
     *
     * @return int
     */
    public function getIdadvertiser()
    {
        return $this->container['idadvertiser'];
    }

    /**
     * Sets idadvertiser
     *
     * @param int $idadvertiser idadvertiser
     *
     * @return self
     */
    public function setIdadvertiser($idadvertiser)
    {
        if (is_null($idadvertiser)) {
            throw new \InvalidArgumentException('non-nullable idadvertiser cannot be null');
        }
        $this->container['idadvertiser'] = $idadvertiser;

        return $this;
    }

    /**
     * Gets idcategory
     *
     * @return int|null
     */
    public function getIdcategory()
    {
        return $this->container['idcategory'];
    }

    /**
     * Sets idcategory
     *
     * @param int|null $idcategory idcategory
     *
     * @return self
     */
    public function setIdcategory($idcategory)
    {
        if (is_null($idcategory)) {
            throw new \InvalidArgumentException('non-nullable idcategory cannot be null');
        }
        $this->container['idcategory'] = $idcategory;

        return $this;
    }

    /**
     * Gets idstatus
     *
     * @return int|null
     */
    public function getIdstatus()
    {
        return $this->container['idstatus'];
    }

    /**
     * Sets idstatus
     *
     * @param int|null $idstatus Moderation statuses:  * 1510 - Pending  * 1520 - Approved  * 1530 - Blocked
     *
     * @return self
     */
    public function setIdstatus($idstatus)
    {
        if (is_null($idstatus)) {
            throw new \InvalidArgumentException('non-nullable idstatus cannot be null');
        }
        $allowedValues = $this->getIdstatusAllowableValues();
        if (!in_array($idstatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'idstatus', must be one of '%s'",
                    $idstatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['idstatus'] = $idstatus;

        return $this;
    }

    /**
     * Gets idrunstatus
     *
     * @return int|null
     */
    public function getIdrunstatus()
    {
        return $this->container['idrunstatus'];
    }

    /**
     * Sets idrunstatus
     *
     * @param int|null $idrunstatus Run statuses:  * 4010 - Running  * 4020 - Paused  * 4030 - Finished
     *
     * @return self
     */
    public function setIdrunstatus($idrunstatus)
    {
        if (is_null($idrunstatus)) {
            throw new \InvalidArgumentException('non-nullable idrunstatus cannot be null');
        }
        $allowedValues = $this->getIdrunstatusAllowableValues();
        if (!in_array($idrunstatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'idrunstatus', must be one of '%s'",
                    $idrunstatus,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['idrunstatus'] = $idrunstatus;

        return $this;
    }

    /**
     * Gets idpricemodel
     *
     * @return int|null
     */
    public function getIdpricemodel()
    {
        return $this->container['idpricemodel'];
    }

    /**
     * Sets idpricemodel
     *
     * @param int|null $idpricemodel Pricing models:  * 1 - CPM  * 2 - CPC  * 3 - CPA  * 4 - CPUC (cost per unique click)  * 5 - CPUM (cost per unique mile)
     *
     * @return self
     */
    public function setIdpricemodel($idpricemodel)
    {
        if (is_null($idpricemodel)) {
            throw new \InvalidArgumentException('non-nullable idpricemodel cannot be null');
        }
        $allowedValues = $this->getIdpricemodelAllowableValues();
        if (!in_array($idpricemodel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'idpricemodel', must be one of '%s'",
                    $idpricemodel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['idpricemodel'] = $idpricemodel;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate rate
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets budget_total
     *
     * @return float|null
     */
    public function getBudgetTotal()
    {
        return $this->container['budget_total'];
    }

    /**
     * Sets budget_total
     *
     * @param float|null $budget_total budget_total
     *
     * @return self
     */
    public function setBudgetTotal($budget_total)
    {
        if (is_null($budget_total)) {
            throw new \InvalidArgumentException('non-nullable budget_total cannot be null');
        }
        $this->container['budget_total'] = $budget_total;

        return $this;
    }

    /**
     * Gets budget_daily
     *
     * @return float|null
     */
    public function getBudgetDaily()
    {
        return $this->container['budget_daily'];
    }

    /**
     * Sets budget_daily
     *
     * @param float|null $budget_daily budget_daily
     *
     * @return self
     */
    public function setBudgetDaily($budget_daily)
    {
        if (is_null($budget_daily)) {
            throw new \InvalidArgumentException('non-nullable budget_daily cannot be null');
        }
        $this->container['budget_daily'] = $budget_daily;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets finish_date
     *
     * @return string|null
     */
    public function getFinishDate()
    {
        return $this->container['finish_date'];
    }

    /**
     * Sets finish_date
     *
     * @param string|null $finish_date finish_date
     *
     * @return self
     */
    public function setFinishDate($finish_date)
    {
        if (is_null($finish_date)) {
            throw new \InvalidArgumentException('non-nullable finish_date cannot be null');
        }
        $this->container['finish_date'] = $finish_date;

        return $this;
    }

    /**
     * Gets os
     *
     * @return int[]|null
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param int[]|null $os os
     *
     * @return self
     */
    public function setOs($os)
    {
        if (is_null($os)) {
            throw new \InvalidArgumentException('non-nullable os cannot be null');
        }
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets browser
     *
     * @return int[]|null
     */
    public function getBrowser()
    {
        return $this->container['browser'];
    }

    /**
     * Sets browser
     *
     * @param int[]|null $browser browser
     *
     * @return self
     */
    public function setBrowser($browser)
    {
        if (is_null($browser)) {
            throw new \InvalidArgumentException('non-nullable browser cannot be null');
        }
        $this->container['browser'] = $browser;

        return $this;
    }

    /**
     * Gets device
     *
     * @return int[]|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param int[]|null $device device
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return int[]|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param int[]|null $brand brand
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string[]|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string[]|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets geo
     *
     * @return int[]|null
     */
    public function getGeo()
    {
        return $this->container['geo'];
    }

    /**
     * Sets geo
     *
     * @param int[]|null $geo Array of GeoNames IDs.
     *
     * @return self
     */
    public function setGeo($geo)
    {
        if (is_null($geo)) {
            throw new \InvalidArgumentException('non-nullable geo cannot be null');
        }
        $this->container['geo'] = $geo;

        return $this;
    }

    /**
     * Gets geo_bl
     *
     * @return int[]|null
     */
    public function getGeoBl()
    {
        return $this->container['geo_bl'];
    }

    /**
     * Sets geo_bl
     *
     * @param int[]|null $geo_bl Array of GeoNames IDs.
     *
     * @return self
     */
    public function setGeoBl($geo_bl)
    {
        if (is_null($geo_bl)) {
            throw new \InvalidArgumentException('non-nullable geo_bl cannot be null');
        }
        $this->container['geo_bl'] = $geo_bl;

        return $this;
    }

    /**
     * Gets sites_category
     *
     * @return int[]|null
     */
    public function getSitesCategory()
    {
        return $this->container['sites_category'];
    }

    /**
     * Sets sites_category
     *
     * @param int[]|null $sites_category sites_category
     *
     * @return self
     */
    public function setSitesCategory($sites_category)
    {
        if (is_null($sites_category)) {
            throw new \InvalidArgumentException('non-nullable sites_category cannot be null');
        }
        $this->container['sites_category'] = $sites_category;

        return $this;
    }

    /**
     * Gets timetargeting
     *
     * @return string|null
     */
    public function getTimetargeting()
    {
        return $this->container['timetargeting'];
    }

    /**
     * Sets timetargeting
     *
     * @param string|null $timetargeting This field uses a special format.  For example, if you need to disable all time slots except slots from 00:00 to 05:00 and from 22:00 to 23:00 you have to pass the following JSON-string as value:  ```json {   \"tt\": {     \"1\": {\"0\":0,\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"22\":0,\"23\":0},     \"2\": {\"0\":0,\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"22\":0,\"23\":0},     \"3\": {\"0\":0,\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"22\":0,\"23\":0},     \"4\": {\"0\":0,\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"22\":0,\"23\":0},     \"5\": {\"0\":0,\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"22\":0,\"23\":0},     \"6\": {\"0\":0,\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"22\":0,\"23\":0},     \"7\": {\"0\":0,\"1\":0,\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"22\":0,\"23\":0}   } } ``` The logic is simple. Horizontal lines are representing week days: 1 (Monday) - 7 (Sunday). Vertical columns are hours: 0 - 23. You have to put **0** value to needed cells to disable a particular time slot. A timeslot is enabled by default so you don't need to put 1 to enable cells.
     *
     * @return self
     */
    public function setTimetargeting($timetargeting)
    {
        if (is_null($timetargeting)) {
            throw new \InvalidArgumentException('non-nullable timetargeting cannot be null');
        }
        $this->container['timetargeting'] = $timetargeting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


