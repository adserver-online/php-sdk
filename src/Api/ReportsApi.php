<?php
/**
 * ReportsApi
 * PHP version 5
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright (c) 2020 Adserver.Online
 * Contact: support@adsrv.org
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adserver\Api;

use Adserver\ApiException;
use Adserver\Configuration;
use Adserver\HeaderSelector;
use Adserver\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * ReportsApi Class Doc Comment
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getEvents
     *
     * Events report
     *
     * @param  string $dateBegin Beginning of date interval (required)
     * @param  string $dateEnd Ending of date interval (required)
     * @param  int $report Report types:  * 1 - Linear VAST  * 2 - Video banner  * 10 - blocked (required)
     * @param  string $group Report&#39;s grouping (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser&#39;s ID (optional)
     * @param  int $idcampaign Filter by campaign&#39;s ID (optional)
     * @param  int $idgroup Filter by campaign&#39;s group ID (optional)
     * @param  int $idad Filter by ad&#39;s ID (optional)
     * @param  int $idpublisher Filter by publisher&#39;s ID (optional)
     * @param  int $idsite Filter by site&#39;s ID (optional)
     * @param  int $idzone Filter by zone&#39;s ID (optional)
     *
     * @throws \Adserver\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]|\Adserver\Model\FormErrorResponse
     */
    public function getEvents($dateBegin, $dateEnd, $report, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null)
    {
        list($response) = $this->getEventsWithHttpInfo($dateBegin, $dateEnd, $report, $group, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone);
        return $response;
    }

    /**
     * Operation getEventsWithHttpInfo
     *
     * Events report
     *
     * @param  string $dateBegin Beginning of date interval (required)
     * @param  string $dateEnd Ending of date interval (required)
     * @param  int $report Report types:  * 1 - Linear VAST  * 2 - Video banner  * 10 - blocked (required)
     * @param  string $group Report&#39;s grouping (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser&#39;s ID (optional)
     * @param  int $idcampaign Filter by campaign&#39;s ID (optional)
     * @param  int $idgroup Filter by campaign&#39;s group ID (optional)
     * @param  int $idad Filter by ad&#39;s ID (optional)
     * @param  int $idpublisher Filter by publisher&#39;s ID (optional)
     * @param  int $idsite Filter by site&#39;s ID (optional)
     * @param  int $idzone Filter by zone&#39;s ID (optional)
     *
     * @throws \Adserver\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[]|\Adserver\Model\FormErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsWithHttpInfo($dateBegin, $dateEnd, $report, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null)
    {
        $request = $this->getEventsRequest($dateBegin, $dateEnd, $report, $group, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Adserver\Model\FormErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Adserver\Model\FormErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Adserver\Model\FormErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventsAsync
     *
     * Events report
     *
     * @param  string $dateBegin Beginning of date interval (required)
     * @param  string $dateEnd Ending of date interval (required)
     * @param  int $report Report types:  * 1 - Linear VAST  * 2 - Video banner  * 10 - blocked (required)
     * @param  string $group Report&#39;s grouping (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser&#39;s ID (optional)
     * @param  int $idcampaign Filter by campaign&#39;s ID (optional)
     * @param  int $idgroup Filter by campaign&#39;s group ID (optional)
     * @param  int $idad Filter by ad&#39;s ID (optional)
     * @param  int $idpublisher Filter by publisher&#39;s ID (optional)
     * @param  int $idsite Filter by site&#39;s ID (optional)
     * @param  int $idzone Filter by zone&#39;s ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsAsync($dateBegin, $dateEnd, $report, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null)
    {
        return $this->getEventsAsyncWithHttpInfo($dateBegin, $dateEnd, $report, $group, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventsAsyncWithHttpInfo
     *
     * Events report
     *
     * @param  string $dateBegin Beginning of date interval (required)
     * @param  string $dateEnd Ending of date interval (required)
     * @param  int $report Report types:  * 1 - Linear VAST  * 2 - Video banner  * 10 - blocked (required)
     * @param  string $group Report&#39;s grouping (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser&#39;s ID (optional)
     * @param  int $idcampaign Filter by campaign&#39;s ID (optional)
     * @param  int $idgroup Filter by campaign&#39;s group ID (optional)
     * @param  int $idad Filter by ad&#39;s ID (optional)
     * @param  int $idpublisher Filter by publisher&#39;s ID (optional)
     * @param  int $idsite Filter by site&#39;s ID (optional)
     * @param  int $idzone Filter by zone&#39;s ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsAsyncWithHttpInfo($dateBegin, $dateEnd, $report, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null)
    {
        $returnType = 'object[]';
        $request = $this->getEventsRequest($dateBegin, $dateEnd, $report, $group, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEvents'
     *
     * @param  string $dateBegin Beginning of date interval (required)
     * @param  string $dateEnd Ending of date interval (required)
     * @param  int $report Report types:  * 1 - Linear VAST  * 2 - Video banner  * 10 - blocked (required)
     * @param  string $group Report&#39;s grouping (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser&#39;s ID (optional)
     * @param  int $idcampaign Filter by campaign&#39;s ID (optional)
     * @param  int $idgroup Filter by campaign&#39;s group ID (optional)
     * @param  int $idad Filter by ad&#39;s ID (optional)
     * @param  int $idpublisher Filter by publisher&#39;s ID (optional)
     * @param  int $idsite Filter by site&#39;s ID (optional)
     * @param  int $idzone Filter by zone&#39;s ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventsRequest($dateBegin, $dateEnd, $report, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null)
    {
        // verify the required parameter 'dateBegin' is set
        if ($dateBegin === null || (is_array($dateBegin) && count($dateBegin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dateBegin when calling getEvents'
            );
        }
        // verify the required parameter 'dateEnd' is set
        if ($dateEnd === null || (is_array($dateEnd) && count($dateEnd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dateEnd when calling getEvents'
            );
        }
        // verify the required parameter 'report' is set
        if ($report === null || (is_array($report) && count($report) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report when calling getEvents'
            );
        }
        // verify the required parameter 'group' is set
        if ($group === null || (is_array($group) && count($group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group when calling getEvents'
            );
        }

        $resourcePath = '/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dateBegin !== null) {
            if('form' === 'form' && is_array($dateBegin)) {
                foreach($dateBegin as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dateBegin'] = $dateBegin;
            }
        }
        // query params
        if ($dateEnd !== null) {
            if('form' === 'form' && is_array($dateEnd)) {
                foreach($dateEnd as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dateEnd'] = $dateEnd;
            }
        }
        // query params
        if ($report !== null) {
            if('form' === 'form' && is_array($report)) {
                foreach($report as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['report'] = $report;
            }
        }
        // query params
        if ($group !== null) {
            if('form' === 'form' && is_array($group)) {
                foreach($group as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['group'] = $group;
            }
        }
        // query params
        if ($timezone !== null) {
            if('form' === 'form' && is_array($timezone)) {
                foreach($timezone as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['timezone'] = $timezone;
            }
        }
        // query params
        if ($idadvertiser !== null) {
            if('form' === 'form' && is_array($idadvertiser)) {
                foreach($idadvertiser as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idadvertiser'] = $idadvertiser;
            }
        }
        // query params
        if ($idcampaign !== null) {
            if('form' === 'form' && is_array($idcampaign)) {
                foreach($idcampaign as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idcampaign'] = $idcampaign;
            }
        }
        // query params
        if ($idgroup !== null) {
            if('form' === 'form' && is_array($idgroup)) {
                foreach($idgroup as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idgroup'] = $idgroup;
            }
        }
        // query params
        if ($idad !== null) {
            if('form' === 'form' && is_array($idad)) {
                foreach($idad as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idad'] = $idad;
            }
        }
        // query params
        if ($idpublisher !== null) {
            if('form' === 'form' && is_array($idpublisher)) {
                foreach($idpublisher as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idpublisher'] = $idpublisher;
            }
        }
        // query params
        if ($idsite !== null) {
            if('form' === 'form' && is_array($idsite)) {
                foreach($idsite as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idsite'] = $idsite;
            }
        }
        // query params
        if ($idzone !== null) {
            if('form' === 'form' && is_array($idzone)) {
                foreach($idzone as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idzone'] = $idzone;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStats
     *
     * Stats report
     *
     * @param  string $dateBegin Beginning of date interval (required)
     * @param  string $dateEnd Ending of date interval (required)
     * @param  string $group Group report by this dimension (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser&#39;s ID (optional)
     * @param  int $idcampaign Filter by campaign&#39;s ID (optional)
     * @param  int $idgroup Filter by campaign&#39;s group ID (optional)
     * @param  int $idad Filter by ad&#39;s ID (optional)
     * @param  int $idpublisher Filter by publisher&#39;s ID (optional)
     * @param  int $idsite Filter by site&#39;s ID (optional)
     * @param  int $idzone Filter by zone&#39;s ID (optional)
     *
     * @throws \Adserver\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Adserver\Model\StatsItem[]|\Adserver\Model\FormErrorResponse
     */
    public function getStats($dateBegin, $dateEnd, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null)
    {
        list($response) = $this->getStatsWithHttpInfo($dateBegin, $dateEnd, $group, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone);
        return $response;
    }

    /**
     * Operation getStatsWithHttpInfo
     *
     * Stats report
     *
     * @param  string $dateBegin Beginning of date interval (required)
     * @param  string $dateEnd Ending of date interval (required)
     * @param  string $group Group report by this dimension (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser&#39;s ID (optional)
     * @param  int $idcampaign Filter by campaign&#39;s ID (optional)
     * @param  int $idgroup Filter by campaign&#39;s group ID (optional)
     * @param  int $idad Filter by ad&#39;s ID (optional)
     * @param  int $idpublisher Filter by publisher&#39;s ID (optional)
     * @param  int $idsite Filter by site&#39;s ID (optional)
     * @param  int $idzone Filter by zone&#39;s ID (optional)
     *
     * @throws \Adserver\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Adserver\Model\StatsItem[]|\Adserver\Model\FormErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatsWithHttpInfo($dateBegin, $dateEnd, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null)
    {
        $request = $this->getStatsRequest($dateBegin, $dateEnd, $group, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Adserver\Model\StatsItem[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Adserver\Model\StatsItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Adserver\Model\FormErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Adserver\Model\FormErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Adserver\Model\StatsItem[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Adserver\Model\StatsItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Adserver\Model\FormErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatsAsync
     *
     * Stats report
     *
     * @param  string $dateBegin Beginning of date interval (required)
     * @param  string $dateEnd Ending of date interval (required)
     * @param  string $group Group report by this dimension (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser&#39;s ID (optional)
     * @param  int $idcampaign Filter by campaign&#39;s ID (optional)
     * @param  int $idgroup Filter by campaign&#39;s group ID (optional)
     * @param  int $idad Filter by ad&#39;s ID (optional)
     * @param  int $idpublisher Filter by publisher&#39;s ID (optional)
     * @param  int $idsite Filter by site&#39;s ID (optional)
     * @param  int $idzone Filter by zone&#39;s ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatsAsync($dateBegin, $dateEnd, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null)
    {
        return $this->getStatsAsyncWithHttpInfo($dateBegin, $dateEnd, $group, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatsAsyncWithHttpInfo
     *
     * Stats report
     *
     * @param  string $dateBegin Beginning of date interval (required)
     * @param  string $dateEnd Ending of date interval (required)
     * @param  string $group Group report by this dimension (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser&#39;s ID (optional)
     * @param  int $idcampaign Filter by campaign&#39;s ID (optional)
     * @param  int $idgroup Filter by campaign&#39;s group ID (optional)
     * @param  int $idad Filter by ad&#39;s ID (optional)
     * @param  int $idpublisher Filter by publisher&#39;s ID (optional)
     * @param  int $idsite Filter by site&#39;s ID (optional)
     * @param  int $idzone Filter by zone&#39;s ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatsAsyncWithHttpInfo($dateBegin, $dateEnd, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null)
    {
        $returnType = '\Adserver\Model\StatsItem[]';
        $request = $this->getStatsRequest($dateBegin, $dateEnd, $group, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStats'
     *
     * @param  string $dateBegin Beginning of date interval (required)
     * @param  string $dateEnd Ending of date interval (required)
     * @param  string $group Group report by this dimension (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser&#39;s ID (optional)
     * @param  int $idcampaign Filter by campaign&#39;s ID (optional)
     * @param  int $idgroup Filter by campaign&#39;s group ID (optional)
     * @param  int $idad Filter by ad&#39;s ID (optional)
     * @param  int $idpublisher Filter by publisher&#39;s ID (optional)
     * @param  int $idsite Filter by site&#39;s ID (optional)
     * @param  int $idzone Filter by zone&#39;s ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStatsRequest($dateBegin, $dateEnd, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null)
    {
        // verify the required parameter 'dateBegin' is set
        if ($dateBegin === null || (is_array($dateBegin) && count($dateBegin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dateBegin when calling getStats'
            );
        }
        // verify the required parameter 'dateEnd' is set
        if ($dateEnd === null || (is_array($dateEnd) && count($dateEnd) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dateEnd when calling getStats'
            );
        }
        // verify the required parameter 'group' is set
        if ($group === null || (is_array($group) && count($group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group when calling getStats'
            );
        }

        $resourcePath = '/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dateBegin !== null) {
            if('form' === 'form' && is_array($dateBegin)) {
                foreach($dateBegin as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dateBegin'] = $dateBegin;
            }
        }
        // query params
        if ($dateEnd !== null) {
            if('form' === 'form' && is_array($dateEnd)) {
                foreach($dateEnd as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['dateEnd'] = $dateEnd;
            }
        }
        // query params
        if ($group !== null) {
            if('form' === 'form' && is_array($group)) {
                foreach($group as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['group'] = $group;
            }
        }
        // query params
        if ($timezone !== null) {
            if('form' === 'form' && is_array($timezone)) {
                foreach($timezone as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['timezone'] = $timezone;
            }
        }
        // query params
        if ($idadvertiser !== null) {
            if('form' === 'form' && is_array($idadvertiser)) {
                foreach($idadvertiser as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idadvertiser'] = $idadvertiser;
            }
        }
        // query params
        if ($idcampaign !== null) {
            if('form' === 'form' && is_array($idcampaign)) {
                foreach($idcampaign as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idcampaign'] = $idcampaign;
            }
        }
        // query params
        if ($idgroup !== null) {
            if('form' === 'form' && is_array($idgroup)) {
                foreach($idgroup as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idgroup'] = $idgroup;
            }
        }
        // query params
        if ($idad !== null) {
            if('form' === 'form' && is_array($idad)) {
                foreach($idad as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idad'] = $idad;
            }
        }
        // query params
        if ($idpublisher !== null) {
            if('form' === 'form' && is_array($idpublisher)) {
                foreach($idpublisher as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idpublisher'] = $idpublisher;
            }
        }
        // query params
        if ($idsite !== null) {
            if('form' === 'form' && is_array($idsite)) {
                foreach($idsite as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idsite'] = $idsite;
            }
        }
        // query params
        if ($idzone !== null) {
            if('form' === 'form' && is_array($idzone)) {
                foreach($idzone as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['idzone'] = $idzone;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
