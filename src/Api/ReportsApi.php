<?php
/**
 * ReportsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Copyright (c) 2020-2024 Adserver.Online
 * @link: https://adserver.online
 * Contact: support@adsrv.org
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Adserver\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Adserver\ApiException;
use Adserver\Configuration;
use Adserver\HeaderSelector;
use Adserver\ObjectSerializer;

/**
 * ReportsApi Class Doc Comment
 *
 * @category Class
 * @package  Adserver
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getConversions' => [
            'application/json',
        ],
        'getEvents' => [
            'application/json',
        ],
        'getStatement' => [
            'application/json',
        ],
        'getStats' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getConversions
     *
     * Conversions
     *
     * @param  int $page page (optional)
     * @param  int $per_page per_page (optional)
     * @param  string $sort sort (optional)
     * @param  object[] $filter filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversions'] to see the possible values for this operation
     *
     * @throws \Adserver\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function getConversions($page = null, $per_page = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getConversions'][0])
    {
        list($response) = $this->getConversionsWithHttpInfo($page, $per_page, $sort, $filter, $contentType);
        return $response;
    }

    /**
     * Operation getConversionsWithHttpInfo
     *
     * Conversions
     *
     * @param  int $page (optional)
     * @param  int $per_page (optional)
     * @param  string $sort (optional)
     * @param  object[] $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversions'] to see the possible values for this operation
     *
     * @throws \Adserver\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getConversionsWithHttpInfo($page = null, $per_page = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getConversions'][0])
    {
        $request = $this->getConversionsRequest($page, $per_page, $sort, $filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConversionsAsync
     *
     * Conversions
     *
     * @param  int $page (optional)
     * @param  int $per_page (optional)
     * @param  string $sort (optional)
     * @param  object[] $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversionsAsync($page = null, $per_page = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getConversions'][0])
    {
        return $this->getConversionsAsyncWithHttpInfo($page, $per_page, $sort, $filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConversionsAsyncWithHttpInfo
     *
     * Conversions
     *
     * @param  int $page (optional)
     * @param  int $per_page (optional)
     * @param  string $sort (optional)
     * @param  object[] $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversionsAsyncWithHttpInfo($page = null, $per_page = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getConversions'][0])
    {
        $returnType = 'object[]';
        $request = $this->getConversionsRequest($page, $per_page, $sort, $filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConversions'
     *
     * @param  int $page (optional)
     * @param  int $per_page (optional)
     * @param  string $sort (optional)
     * @param  object[] $filter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConversionsRequest($page = null, $per_page = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getConversions'][0])
    {






        $resourcePath = '/conversion';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per-page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEvents
     *
     * Video events
     *
     * @param  string $date_begin Beginning of date interval (required)
     * @param  string $date_end Ending of date interval (required)
     * @param  int $report Report types:  * 1 - VAST  * 2 - Video banner (required)
     * @param  string $group Group by (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser ID (optional)
     * @param  int $idcampaign Filter by campaign ID (optional)
     * @param  int $idgroup Filter by campaign group ID (optional)
     * @param  int $idad Filter by ad ID (optional)
     * @param  int $idpublisher Filter by publisher ID (optional)
     * @param  int $idsite Filter by site ID (optional)
     * @param  int $idzone Filter by zone ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEvents'] to see the possible values for this operation
     *
     * @throws \Adserver\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object[]|\Adserver\Model\FormErrorResponse
     */
    public function getEvents($date_begin, $date_end, $report, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null, string $contentType = self::contentTypes['getEvents'][0])
    {
        list($response) = $this->getEventsWithHttpInfo($date_begin, $date_end, $report, $group, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone, $contentType);
        return $response;
    }

    /**
     * Operation getEventsWithHttpInfo
     *
     * Video events
     *
     * @param  string $date_begin Beginning of date interval (required)
     * @param  string $date_end Ending of date interval (required)
     * @param  int $report Report types:  * 1 - VAST  * 2 - Video banner (required)
     * @param  string $group Group by (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser ID (optional)
     * @param  int $idcampaign Filter by campaign ID (optional)
     * @param  int $idgroup Filter by campaign group ID (optional)
     * @param  int $idad Filter by ad ID (optional)
     * @param  int $idpublisher Filter by publisher ID (optional)
     * @param  int $idsite Filter by site ID (optional)
     * @param  int $idzone Filter by zone ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEvents'] to see the possible values for this operation
     *
     * @throws \Adserver\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object[]|\Adserver\Model\FormErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsWithHttpInfo($date_begin, $date_end, $report, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null, string $contentType = self::contentTypes['getEvents'][0])
    {
        $request = $this->getEventsRequest($date_begin, $date_end, $report, $group, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Adserver\Model\FormErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Adserver\Model\FormErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Adserver\Model\FormErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Adserver\Model\FormErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventsAsync
     *
     * Video events
     *
     * @param  string $date_begin Beginning of date interval (required)
     * @param  string $date_end Ending of date interval (required)
     * @param  int $report Report types:  * 1 - VAST  * 2 - Video banner (required)
     * @param  string $group Group by (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser ID (optional)
     * @param  int $idcampaign Filter by campaign ID (optional)
     * @param  int $idgroup Filter by campaign group ID (optional)
     * @param  int $idad Filter by ad ID (optional)
     * @param  int $idpublisher Filter by publisher ID (optional)
     * @param  int $idsite Filter by site ID (optional)
     * @param  int $idzone Filter by zone ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsAsync($date_begin, $date_end, $report, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null, string $contentType = self::contentTypes['getEvents'][0])
    {
        return $this->getEventsAsyncWithHttpInfo($date_begin, $date_end, $report, $group, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventsAsyncWithHttpInfo
     *
     * Video events
     *
     * @param  string $date_begin Beginning of date interval (required)
     * @param  string $date_end Ending of date interval (required)
     * @param  int $report Report types:  * 1 - VAST  * 2 - Video banner (required)
     * @param  string $group Group by (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser ID (optional)
     * @param  int $idcampaign Filter by campaign ID (optional)
     * @param  int $idgroup Filter by campaign group ID (optional)
     * @param  int $idad Filter by ad ID (optional)
     * @param  int $idpublisher Filter by publisher ID (optional)
     * @param  int $idsite Filter by site ID (optional)
     * @param  int $idzone Filter by zone ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsAsyncWithHttpInfo($date_begin, $date_end, $report, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null, string $contentType = self::contentTypes['getEvents'][0])
    {
        $returnType = 'object[]';
        $request = $this->getEventsRequest($date_begin, $date_end, $report, $group, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEvents'
     *
     * @param  string $date_begin Beginning of date interval (required)
     * @param  string $date_end Ending of date interval (required)
     * @param  int $report Report types:  * 1 - VAST  * 2 - Video banner (required)
     * @param  string $group Group by (required)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser ID (optional)
     * @param  int $idcampaign Filter by campaign ID (optional)
     * @param  int $idgroup Filter by campaign group ID (optional)
     * @param  int $idad Filter by ad ID (optional)
     * @param  int $idpublisher Filter by publisher ID (optional)
     * @param  int $idsite Filter by site ID (optional)
     * @param  int $idzone Filter by zone ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEventsRequest($date_begin, $date_end, $report, $group, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null, string $contentType = self::contentTypes['getEvents'][0])
    {

        // verify the required parameter 'date_begin' is set
        if ($date_begin === null || (is_array($date_begin) && count($date_begin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_begin when calling getEvents'
            );
        }

        // verify the required parameter 'date_end' is set
        if ($date_end === null || (is_array($date_end) && count($date_end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_end when calling getEvents'
            );
        }

        // verify the required parameter 'report' is set
        if ($report === null || (is_array($report) && count($report) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report when calling getEvents'
            );
        }

        // verify the required parameter 'group' is set
        if ($group === null || (is_array($group) && count($group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group when calling getEvents'
            );
        }










        $resourcePath = '/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_begin,
            'dateBegin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_end,
            'dateEnd', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $report,
            'report', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $group,
            'group', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timezone,
            'timezone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idadvertiser,
            'idadvertiser', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idcampaign,
            'idcampaign', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idgroup,
            'idgroup', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idad,
            'idad', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idpublisher,
            'idpublisher', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idsite,
            'idsite', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idzone,
            'idzone', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatement
     *
     * Statement
     *
     * @param  int $page page (optional)
     * @param  int $per_page per_page (optional)
     * @param  string $sort sort (optional)
     * @param  object[] $filter Example:filter[iduser]&#x3D;123&amp;filter[dateBegin]&#x3D;2021-02-09&amp;filter[dateEnd]&#x3D;2021-03-09&amp;filter[showStats]&#x3D;0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatement'] to see the possible values for this operation
     *
     * @throws \Adserver\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Adserver\Model\Statement[]
     */
    public function getStatement($page = null, $per_page = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getStatement'][0])
    {
        list($response) = $this->getStatementWithHttpInfo($page, $per_page, $sort, $filter, $contentType);
        return $response;
    }

    /**
     * Operation getStatementWithHttpInfo
     *
     * Statement
     *
     * @param  int $page (optional)
     * @param  int $per_page (optional)
     * @param  string $sort (optional)
     * @param  object[] $filter Example:filter[iduser]&#x3D;123&amp;filter[dateBegin]&#x3D;2021-02-09&amp;filter[dateEnd]&#x3D;2021-03-09&amp;filter[showStats]&#x3D;0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatement'] to see the possible values for this operation
     *
     * @throws \Adserver\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Adserver\Model\Statement[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatementWithHttpInfo($page = null, $per_page = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getStatement'][0])
    {
        $request = $this->getStatementRequest($page, $per_page, $sort, $filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Adserver\Model\Statement[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Adserver\Model\Statement[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Adserver\Model\Statement[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Adserver\Model\Statement[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Adserver\Model\Statement[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatementAsync
     *
     * Statement
     *
     * @param  int $page (optional)
     * @param  int $per_page (optional)
     * @param  string $sort (optional)
     * @param  object[] $filter Example:filter[iduser]&#x3D;123&amp;filter[dateBegin]&#x3D;2021-02-09&amp;filter[dateEnd]&#x3D;2021-03-09&amp;filter[showStats]&#x3D;0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatementAsync($page = null, $per_page = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getStatement'][0])
    {
        return $this->getStatementAsyncWithHttpInfo($page, $per_page, $sort, $filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatementAsyncWithHttpInfo
     *
     * Statement
     *
     * @param  int $page (optional)
     * @param  int $per_page (optional)
     * @param  string $sort (optional)
     * @param  object[] $filter Example:filter[iduser]&#x3D;123&amp;filter[dateBegin]&#x3D;2021-02-09&amp;filter[dateEnd]&#x3D;2021-03-09&amp;filter[showStats]&#x3D;0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatementAsyncWithHttpInfo($page = null, $per_page = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getStatement'][0])
    {
        $returnType = '\Adserver\Model\Statement[]';
        $request = $this->getStatementRequest($page, $per_page, $sort, $filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatement'
     *
     * @param  int $page (optional)
     * @param  int $per_page (optional)
     * @param  string $sort (optional)
     * @param  object[] $filter Example:filter[iduser]&#x3D;123&amp;filter[dateBegin]&#x3D;2021-02-09&amp;filter[dateEnd]&#x3D;2021-03-09&amp;filter[showStats]&#x3D;0 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStatementRequest($page = null, $per_page = null, $sort = null, $filter = null, string $contentType = self::contentTypes['getStatement'][0])
    {






        $resourcePath = '/statement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per-page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStats
     *
     * Statistics
     *
     * @param  string $date_begin Beginning of date interval (required)
     * @param  string $date_end Ending of date interval (required)
     * @param  string $group Group by (required)
     * @param  string $group2 Extra group by (optional)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser ID (optional)
     * @param  int $idcampaign Filter by campaign ID (optional)
     * @param  int $idgroup Filter by campaign group ID (optional)
     * @param  int $idad Filter by ad ID (optional)
     * @param  int $idpublisher Filter by publisher ID (optional)
     * @param  int $idsite Filter by site ID (optional)
     * @param  int $idzone Filter by zone ID (optional)
     * @param  int $with_trafq If equal to 1, TrafQ column will be added to the response (optional)
     * @param  int $with_pub_metrics If equal to 1, impressions_pub and clicks_pub columns will be added to the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStats'] to see the possible values for this operation
     *
     * @throws \Adserver\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Adserver\Model\StatsItem[]|\Adserver\Model\FormErrorResponse
     */
    public function getStats($date_begin, $date_end, $group, $group2 = null, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null, $with_trafq = null, $with_pub_metrics = null, string $contentType = self::contentTypes['getStats'][0])
    {
        list($response) = $this->getStatsWithHttpInfo($date_begin, $date_end, $group, $group2, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone, $with_trafq, $with_pub_metrics, $contentType);
        return $response;
    }

    /**
     * Operation getStatsWithHttpInfo
     *
     * Statistics
     *
     * @param  string $date_begin Beginning of date interval (required)
     * @param  string $date_end Ending of date interval (required)
     * @param  string $group Group by (required)
     * @param  string $group2 Extra group by (optional)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser ID (optional)
     * @param  int $idcampaign Filter by campaign ID (optional)
     * @param  int $idgroup Filter by campaign group ID (optional)
     * @param  int $idad Filter by ad ID (optional)
     * @param  int $idpublisher Filter by publisher ID (optional)
     * @param  int $idsite Filter by site ID (optional)
     * @param  int $idzone Filter by zone ID (optional)
     * @param  int $with_trafq If equal to 1, TrafQ column will be added to the response (optional)
     * @param  int $with_pub_metrics If equal to 1, impressions_pub and clicks_pub columns will be added to the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStats'] to see the possible values for this operation
     *
     * @throws \Adserver\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Adserver\Model\StatsItem[]|\Adserver\Model\FormErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatsWithHttpInfo($date_begin, $date_end, $group, $group2 = null, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null, $with_trafq = null, $with_pub_metrics = null, string $contentType = self::contentTypes['getStats'][0])
    {
        $request = $this->getStatsRequest($date_begin, $date_end, $group, $group2, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone, $with_trafq, $with_pub_metrics, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Adserver\Model\StatsItem[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Adserver\Model\StatsItem[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Adserver\Model\StatsItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Adserver\Model\FormErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Adserver\Model\FormErrorResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Adserver\Model\FormErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Adserver\Model\StatsItem[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Adserver\Model\StatsItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Adserver\Model\FormErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatsAsync
     *
     * Statistics
     *
     * @param  string $date_begin Beginning of date interval (required)
     * @param  string $date_end Ending of date interval (required)
     * @param  string $group Group by (required)
     * @param  string $group2 Extra group by (optional)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser ID (optional)
     * @param  int $idcampaign Filter by campaign ID (optional)
     * @param  int $idgroup Filter by campaign group ID (optional)
     * @param  int $idad Filter by ad ID (optional)
     * @param  int $idpublisher Filter by publisher ID (optional)
     * @param  int $idsite Filter by site ID (optional)
     * @param  int $idzone Filter by zone ID (optional)
     * @param  int $with_trafq If equal to 1, TrafQ column will be added to the response (optional)
     * @param  int $with_pub_metrics If equal to 1, impressions_pub and clicks_pub columns will be added to the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatsAsync($date_begin, $date_end, $group, $group2 = null, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null, $with_trafq = null, $with_pub_metrics = null, string $contentType = self::contentTypes['getStats'][0])
    {
        return $this->getStatsAsyncWithHttpInfo($date_begin, $date_end, $group, $group2, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone, $with_trafq, $with_pub_metrics, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatsAsyncWithHttpInfo
     *
     * Statistics
     *
     * @param  string $date_begin Beginning of date interval (required)
     * @param  string $date_end Ending of date interval (required)
     * @param  string $group Group by (required)
     * @param  string $group2 Extra group by (optional)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser ID (optional)
     * @param  int $idcampaign Filter by campaign ID (optional)
     * @param  int $idgroup Filter by campaign group ID (optional)
     * @param  int $idad Filter by ad ID (optional)
     * @param  int $idpublisher Filter by publisher ID (optional)
     * @param  int $idsite Filter by site ID (optional)
     * @param  int $idzone Filter by zone ID (optional)
     * @param  int $with_trafq If equal to 1, TrafQ column will be added to the response (optional)
     * @param  int $with_pub_metrics If equal to 1, impressions_pub and clicks_pub columns will be added to the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatsAsyncWithHttpInfo($date_begin, $date_end, $group, $group2 = null, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null, $with_trafq = null, $with_pub_metrics = null, string $contentType = self::contentTypes['getStats'][0])
    {
        $returnType = '\Adserver\Model\StatsItem[]';
        $request = $this->getStatsRequest($date_begin, $date_end, $group, $group2, $timezone, $idadvertiser, $idcampaign, $idgroup, $idad, $idpublisher, $idsite, $idzone, $with_trafq, $with_pub_metrics, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStats'
     *
     * @param  string $date_begin Beginning of date interval (required)
     * @param  string $date_end Ending of date interval (required)
     * @param  string $group Group by (required)
     * @param  string $group2 Extra group by (optional)
     * @param  string $timezone Time zone (optional)
     * @param  int $idadvertiser Filter by advertiser ID (optional)
     * @param  int $idcampaign Filter by campaign ID (optional)
     * @param  int $idgroup Filter by campaign group ID (optional)
     * @param  int $idad Filter by ad ID (optional)
     * @param  int $idpublisher Filter by publisher ID (optional)
     * @param  int $idsite Filter by site ID (optional)
     * @param  int $idzone Filter by zone ID (optional)
     * @param  int $with_trafq If equal to 1, TrafQ column will be added to the response (optional)
     * @param  int $with_pub_metrics If equal to 1, impressions_pub and clicks_pub columns will be added to the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStats'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStatsRequest($date_begin, $date_end, $group, $group2 = null, $timezone = null, $idadvertiser = null, $idcampaign = null, $idgroup = null, $idad = null, $idpublisher = null, $idsite = null, $idzone = null, $with_trafq = null, $with_pub_metrics = null, string $contentType = self::contentTypes['getStats'][0])
    {

        // verify the required parameter 'date_begin' is set
        if ($date_begin === null || (is_array($date_begin) && count($date_begin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_begin when calling getStats'
            );
        }

        // verify the required parameter 'date_end' is set
        if ($date_end === null || (is_array($date_end) && count($date_end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_end when calling getStats'
            );
        }

        // verify the required parameter 'group' is set
        if ($group === null || (is_array($group) && count($group) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group when calling getStats'
            );
        }













        $resourcePath = '/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_begin,
            'dateBegin', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_end,
            'dateEnd', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $group,
            'group', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $group2,
            'group2', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timezone,
            'timezone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idadvertiser,
            'idadvertiser', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idcampaign,
            'idcampaign', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idgroup,
            'idgroup', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idad,
            'idad', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idpublisher,
            'idpublisher', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idsite,
            'idsite', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $idzone,
            'idzone', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_trafq,
            'with_trafq', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with_pub_metrics,
            'with_pub_metrics', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
